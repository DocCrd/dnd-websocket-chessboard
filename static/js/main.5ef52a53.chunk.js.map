{"version":3,"sources":["components/board/Square.jsx","components/util/KnightObserver.js","components/constants/ItemTypes.js","components/util/Overlay.jsx","components/board/SquareWrapper.jsx","components/pieces/Knight.jsx","lib/withDragDropContext.js","components/board/Board.jsx","App.jsx","index.js"],"names":["Square","_ref","squareIsBlack","children","squareStyle","backgroundColor","color","width","height","display","justifyContent","alignItems","react_default","a","createElement","style","knightPosition","observer","emitChange","ItemTypes","Overlay","position","top","left","zIndex","opacity","squareTarget","canDrop","toX","toY","_knightPosition","_knightPosition2","Object","slicedToArray","x","y","dx","Math","abs","dy","isValidKnightMove","drop","_ref2","SquareWrapper","_this$props","this","props","connectDropTarget","isOver","Square_Square","util_Overlay","Component","DropTarget","connect","monitor","dropTarget","Knight","connectDragSource","isDragging","knightStyle","cursor","concat","DragSource","beginDrag","dragSource","connectDragPreview","dragPreview","DragDropContext","HTML5Backend","boardStyle","margin","flexWrap","fontSize","border","withDragDropContext","_ref$knightPosition","knightX","knightY","renderSquare","i","floor","piece","renderPiece","key","board_SquareWrapper","pieces_Knight","squares","push","App","_useState","useState","_useState2","setKnightPosition","useEffect","o","Error","observe","newPosition","board_Board","mountNode","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.5ef52a53.chunk.js","sourcesContent":["import React from \"react\";\n\nexport const Square = ({ squareIsBlack, children }) => {\n  const fill = squareIsBlack ? \"black\" : \"white\";\n  const stroke = squareIsBlack ? \"white\" : \"black\";\n  const squareStyle = {\n    backgroundColor: fill,\n    color: stroke,\n    width: \"100%\",\n    height: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  };\n  return <div style={squareStyle}>{children}</div>;\n};\n","// Game is too generic, rename to KnightObserver\n\nlet knightPosition = [1, 7];\nlet observer = null;\n\n// wrap entire app in an observer to subscribe to a changing state in the most minimal, non-complex way (rather than using EventEmitter or making Game an object model), all that is needed in this case is a stream of values\nexport const observe = o => {\n  if (observer) {\n    throw new Error(\"Multiple observers not implemented.\");\n  }\n\n  observer = o;\n  emitChange();\n\n  // TO-DO: explore purpose of this return statement\n  return () => {\n    observer = null;\n  }\n};\n\nconst emitChange = () => {\n  observer(knightPosition);\n};\n\n// check that knight moves in L shapes (according to the rules of chess)\nexport const isValidKnightMove = (toX, toY) => {\n  const [x, y] = knightPosition; // destructure two-item array\n  const dx = Math.abs(toX - x); // if dx is 1, dy needs to be 2\n  const dy = Math.abs(toY - y); // if dx is 2, dy needs to be 1\n  return (\n    (dx === 2 && dy === 1) || (dx === 1 && dy === 2) // L shape\n  );\n};\n\nexport const moveKnight = (toX, toY) => {\n  knightPosition = [toX, toY];\n  emitChange();\n};\n","// constants for the draggable item types\nexport default {\n  KNIGHT: 'knight',\n}\n","import React from \"react\";\n\nconst Overlay = ({color}) => {\n  return (\n    <div\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        height: \"100%\",\n        width: \"100%\",\n        zIndex: 1,\n        opacity: 0.5,\n        backgroundColor: color,\n      }}\n    />\n  );\n};\n\nexport default Overlay;","import React, { Component } from \"react\";\nimport { DropTarget } from \"react-dnd\";\nimport { Square } from \"./Square\";\nimport { isValidKnightMove, moveKnight } from \"../util/KnightObserver\";\nimport ItemTypes from \"../constants/ItemTypes\";\nimport Overlay from \"../util/Overlay\";\n\n// drop target specification that only handles the drop event\nconst squareTarget = {\n  canDrop({ x, y }) {\n    return isValidKnightMove(x, y);\n  },\n  drop({ x, y }) {\n    // The drop method receives the props of the BoardSquare so it knows where to move the knight when it drops\n    moveKnight(x, y);\n  }\n}\n\n// TO-DO: explore the purpose of !!\nconst collect = (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: !!monitor.isOver(),\n  canDrop: !!monitor.canDrop(),\n});\n\nclass SquareWrapper extends Component {\n  render() {\n    const { x, y, connectDropTarget, isOver, canDrop, children } = this.props;\n    // alternate square colors, determine if it is black or white by its position\n    const squareIsBlack = (x + y) % 2 === 1;\n    // connect the drop target and show the highlight overlay\n    return connectDropTarget(\n      <div\n        style={{\n          position: \"relative\",\n          width: \"100%\",\n          height: \"100%\",\n        }}\n      >\n        <Square squareIsBlack={squareIsBlack}>{children}</Square>\n        {/* no longer dragging, invalid drop location */}\n        {isOver && !canDrop && <Overlay color=\"red\" />}\n        {/* still dragging, but valid drop location */}\n        {!isOver && canDrop && <Overlay color=\"yellow\" />}\n        {/* no longer dragging, valid drop location */}\n        {isOver && canDrop && <Overlay color=\"green\" />}\n      </div>\n    );\n  }\n}\n\nexport default DropTarget(ItemTypes.KNIGHT, squareTarget, collect)(SquareWrapper);","import React, { Component } from \"react\";\nimport { DragSource } from \"react-dnd\";\nimport ItemTypes from \"../constants/ItemTypes\";\n\n// draggable object\nconst knightSource = {\n  beginDrag(props) {\n    return {};\n  },\n}\n\n// collecting function\nconst collect = (connect, monitor) => ({\n  connectDragSource: connect.dragSource(),\n  connectDragPreview: connect.dragPreview(),\n  isDragging: monitor.isDragging(),\n});\n\nclass Knight extends Component {\n  render() {\n    const {\n      connectDragSource,\n      // connectDragPreview,\n      isDragging\n    } = this.props;\n    const knightStyle = {\n      cursor: \"pointer\",\n      opacity: `${isDragging} ? 0.5 : 1`,\n    };\n    return connectDragSource(\n      <span style={knightStyle}>\n      {/* <span style={ Object.assign({}, knightStyle, { isDragging })}> */}\n        {\"â™˜\"}\n      </span>\n    );\n  }\n}\n\nexport default DragSource(ItemTypes.KNIGHT, knightSource, collect)(Knight);\n","import { DragDropContext } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\n\nexport default DragDropContext(HTML5Backend);\n","import React from \"react\";\nimport SquareWrapper from \"./SquareWrapper\";\nimport Knight from \"../pieces/Knight\";\nimport withDragDropContext from \"../../lib/withDragDropContext\";\n\n// chess board component\nconst Board = ({ knightPosition: [knightX, knightY] }) => {\n\n  // generate \"smart\" squares (aware of piece's position)\n  const renderSquare = (i) => {\n    \n    // i: board position, x: column, y: row\n    const x = i % 8;\n    const y = Math.floor(i / 8);\n    const piece = renderPiece(x, y);\n    \n    // render out the square\n    return (\n      <div key={i} style={squareStyle}>\n        <SquareWrapper x={x} y={y}>\n          {piece}\n        </SquareWrapper>\n      </div>\n    );\n  }\n\n  // check if square contains knight piece\n  // if square contains knight piece, render it out\n  const renderPiece = (x, y) => (\n    x === knightX && y === knightY ? <Knight /> : null\n  );\n\n  // populate chess board squares along with any pieces that may be on them\n  const squares = [];\n  for (let i = 0; i < 64; i++) {\n    squares.push(renderSquare(i));\n  }\n  return (\n    <div style={boardStyle}>{squares}</div>\n  );\n\n  // CRITICAL NOTE: the bottom return statement produces an error: \"Cannot have two HTML backends at the same time\".\n\n  // return (\n  //   <DragDropContextProvider backend={HTML5Backend}>\n  //     <div style={boardStyle}>{squares}</div>\n  //   </DragDropContextProvider>\n  // );\n\n  // Need to use the singleton pattern to ensure only a single instance of DragDropContext is initialised throughout app. Credit fix to @gcorne, https://github.com/react-dnd/react-dnd/issues/186#issuecomment-282789420, and @nickangtc for courteously sharing this fix: https://github.com/react-dnd/react-dnd/issues/740#issuecomment-299686690. \n}\n\n// styling properties applied to the board element\nconst boardStyle = {\n  margin: \"0 auto\",\n  width: \"100vmin\",\n  height: \"100vmin\",\n  display: \"flex\",\n  flexWrap: \"wrap\",\n  fontSize: \"10vmin\",\n  border: \"1px solid black\",\n};\n\n// styling properties applied to each square element\nconst squareStyle = {\n  width: \"12.5%\",\n  height: \"12.5%\",\n};\n\nexport default withDragDropContext(Board);\n","import React, { useState, useEffect } from \"react\";\nimport Board from \"./components/board/Board\";\nimport { observe } from \"./components/util/KnightObserver\";\nimport \"./stylesheets/global.css\";\n\n// Chess Board Demo\nconst App = () => {\n  // wrap entire app in an observer to subscribe to a changing state in the most minimal, non-complex way (rather than using EventEmitter or making Game an object model), all that is needed in this case is a stream of values\n  const [knightPosition, setKnightPosition] = useState([1,7]);\n  // the observe function will return an unsubscribe callback\n  useEffect(() =>\n    observe(\n      newPosition => setKnightPosition(newPosition)\n    )\n  );\n  return (\n    <div>\n      <Board knightPosition={knightPosition} />      \n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./App\";\n\n// the React app's entry point code\nconst mountNode = document.getElementById(\"root\");\n\n// render App component within the mount (root) node\nrender(<App />, mountNode);\n"],"sourceRoot":""}